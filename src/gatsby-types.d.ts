/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {
	type Maybe<T> = T | null;
	type InputMaybe<T> = T | null;
	type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
	type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
		[SubKey in K]?: Maybe<T[SubKey]>;
	};
	type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
		[SubKey in K]: Maybe<T[SubKey]>;
	};
	/** All built-in and custom scalars, mapped to their actual values */
	type Scalars = {
		/** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
		ID: string;
		/** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
		String: string;
		/** The `Boolean` scalar type represents `true` or `false`. */
		Boolean: boolean;
		/** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
		Int: number;
		/** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
		Float: number;
		/** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
		Date: string;
		GatsbyImageData: import("gatsby-plugin-image").IGatsbyImageData;
		/** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
		JSON: Record<string, unknown>;
	};

	type BooleanQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars["Boolean"]>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Boolean"]>>>;
		readonly ne: InputMaybe<Scalars["Boolean"]>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Boolean"]>>>;
	};

	type ContentfulAsset = ContentfulReference &
		Node &
		RemoteFile & {
			readonly children: ReadonlyArray<Node>;
			readonly contentful_id: Scalars["String"];
			readonly createdAt: Maybe<Scalars["Date"]>;
			readonly description: Maybe<Scalars["String"]>;
			readonly file: Maybe<ContentfulAssetFile>;
			readonly filename: Scalars["String"];
			readonly filesize: Maybe<Scalars["Int"]>;
			/** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
			readonly gatsbyImage: Maybe<Scalars["GatsbyImageData"]>;
			readonly gatsbyImageData: Maybe<Scalars["JSON"]>;
			readonly height: Maybe<Scalars["Int"]>;
			readonly id: Scalars["ID"];
			readonly internal: Internal;
			readonly mimeType: Scalars["String"];
			readonly node_locale: Maybe<Scalars["String"]>;
			readonly parent: Maybe<Node>;
			readonly placeholderUrl: Maybe<Scalars["String"]>;
			readonly publicUrl: Scalars["String"];
			readonly resize: Maybe<RemoteFileResize>;
			readonly size: Maybe<Scalars["Int"]>;
			readonly spaceId: Maybe<Scalars["String"]>;
			readonly sys: Maybe<ContentfulAssetSys>;
			readonly title: Maybe<Scalars["String"]>;
			readonly updatedAt: Maybe<Scalars["Date"]>;
			readonly url: Maybe<Scalars["String"]>;
			readonly width: Maybe<Scalars["Int"]>;
		};

	type ContentfulAsset_createdAtArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type ContentfulAsset_gatsbyImageArgs = {
		aspectRatio: InputMaybe<Scalars["Float"]>;
		backgroundColor: InputMaybe<Scalars["String"]>;
		breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Int"]>>>;
		cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
		fit?: InputMaybe<RemoteFileFit>;
		formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
		height: InputMaybe<Scalars["Int"]>;
		layout?: InputMaybe<RemoteFileLayout>;
		outputPixelDensities?: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Float"]>>>;
		placeholder?: InputMaybe<RemoteFilePlaceholder>;
		quality?: InputMaybe<Scalars["Int"]>;
		sizes: InputMaybe<Scalars["String"]>;
		width: InputMaybe<Scalars["Int"]>;
	};

	type ContentfulAsset_gatsbyImageDataArgs = {
		aspectRatio: InputMaybe<Scalars["Float"]>;
		backgroundColor: InputMaybe<Scalars["String"]>;
		breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Int"]>>>;
		cornerRadius?: InputMaybe<Scalars["Int"]>;
		cropFocus: InputMaybe<ContentfulImageCropFocus>;
		formats?: InputMaybe<ReadonlyArray<InputMaybe<GatsbyImageFormat>>>;
		height: InputMaybe<Scalars["Int"]>;
		jpegProgressive?: InputMaybe<Scalars["Boolean"]>;
		layout: InputMaybe<GatsbyImageLayout>;
		outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Float"]>>>;
		placeholder: InputMaybe<GatsbyImagePlaceholder>;
		quality: InputMaybe<Scalars["Int"]>;
		resizingBehavior: InputMaybe<ImageResizingBehavior>;
		sizes: InputMaybe<Scalars["String"]>;
		width: InputMaybe<Scalars["Int"]>;
	};

	type ContentfulAsset_resizeArgs = {
		aspectRatio: InputMaybe<Scalars["Float"]>;
		cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
		fit?: InputMaybe<RemoteFileFit>;
		format?: InputMaybe<RemoteFileFormat>;
		height: InputMaybe<Scalars["Int"]>;
		quality?: InputMaybe<Scalars["Int"]>;
		width: InputMaybe<Scalars["Int"]>;
	};

	type ContentfulAsset_updatedAtArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type ContentfulAssetConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<ContentfulAssetEdge>;
		readonly group: ReadonlyArray<ContentfulAssetGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<ContentfulAsset>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type ContentfulAssetConnection_distinctArgs = {
		field: ContentfulAssetFieldsEnum;
	};

	type ContentfulAssetConnection_groupArgs = {
		field: ContentfulAssetFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type ContentfulAssetConnection_maxArgs = {
		field: ContentfulAssetFieldsEnum;
	};

	type ContentfulAssetConnection_minArgs = {
		field: ContentfulAssetFieldsEnum;
	};

	type ContentfulAssetConnection_sumArgs = {
		field: ContentfulAssetFieldsEnum;
	};

	type ContentfulAssetEdge = {
		readonly next: Maybe<ContentfulAsset>;
		readonly node: ContentfulAsset;
		readonly previous: Maybe<ContentfulAsset>;
	};

	type ContentfulAssetFieldsEnum =
		| "children"
		| "children.children"
		| "children.children.children"
		| "children.children.children.children"
		| "children.children.children.id"
		| "children.children.id"
		| "children.children.internal.content"
		| "children.children.internal.contentDigest"
		| "children.children.internal.description"
		| "children.children.internal.fieldOwners"
		| "children.children.internal.ignoreType"
		| "children.children.internal.mediaType"
		| "children.children.internal.owner"
		| "children.children.internal.type"
		| "children.children.parent.children"
		| "children.children.parent.id"
		| "children.id"
		| "children.internal.content"
		| "children.internal.contentDigest"
		| "children.internal.description"
		| "children.internal.fieldOwners"
		| "children.internal.ignoreType"
		| "children.internal.mediaType"
		| "children.internal.owner"
		| "children.internal.type"
		| "children.parent.children"
		| "children.parent.children.children"
		| "children.parent.children.id"
		| "children.parent.id"
		| "children.parent.internal.content"
		| "children.parent.internal.contentDigest"
		| "children.parent.internal.description"
		| "children.parent.internal.fieldOwners"
		| "children.parent.internal.ignoreType"
		| "children.parent.internal.mediaType"
		| "children.parent.internal.owner"
		| "children.parent.internal.type"
		| "children.parent.parent.children"
		| "children.parent.parent.id"
		| "contentful_id"
		| "createdAt"
		| "description"
		| "file.contentType"
		| "file.details.size"
		| "file.fileName"
		| "file.url"
		| "filename"
		| "filesize"
		| "gatsbyImage"
		| "gatsbyImageData"
		| "height"
		| "id"
		| "internal.content"
		| "internal.contentDigest"
		| "internal.description"
		| "internal.fieldOwners"
		| "internal.ignoreType"
		| "internal.mediaType"
		| "internal.owner"
		| "internal.type"
		| "mimeType"
		| "node_locale"
		| "parent.children"
		| "parent.children.children"
		| "parent.children.children.children"
		| "parent.children.children.id"
		| "parent.children.id"
		| "parent.children.internal.content"
		| "parent.children.internal.contentDigest"
		| "parent.children.internal.description"
		| "parent.children.internal.fieldOwners"
		| "parent.children.internal.ignoreType"
		| "parent.children.internal.mediaType"
		| "parent.children.internal.owner"
		| "parent.children.internal.type"
		| "parent.children.parent.children"
		| "parent.children.parent.id"
		| "parent.id"
		| "parent.internal.content"
		| "parent.internal.contentDigest"
		| "parent.internal.description"
		| "parent.internal.fieldOwners"
		| "parent.internal.ignoreType"
		| "parent.internal.mediaType"
		| "parent.internal.owner"
		| "parent.internal.type"
		| "parent.parent.children"
		| "parent.parent.children.children"
		| "parent.parent.children.id"
		| "parent.parent.id"
		| "parent.parent.internal.content"
		| "parent.parent.internal.contentDigest"
		| "parent.parent.internal.description"
		| "parent.parent.internal.fieldOwners"
		| "parent.parent.internal.ignoreType"
		| "parent.parent.internal.mediaType"
		| "parent.parent.internal.owner"
		| "parent.parent.internal.type"
		| "parent.parent.parent.children"
		| "parent.parent.parent.id"
		| "placeholderUrl"
		| "publicUrl"
		| "resize.height"
		| "resize.src"
		| "resize.width"
		| "size"
		| "spaceId"
		| "sys.revision"
		| "sys.type"
		| "title"
		| "updatedAt"
		| "url"
		| "width";

	type ContentfulAssetFile = {
		readonly contentType: Maybe<Scalars["String"]>;
		readonly details: Maybe<ContentfulAssetFileDetails>;
		readonly fileName: Maybe<Scalars["String"]>;
		readonly url: Maybe<Scalars["String"]>;
	};

	type ContentfulAssetFileDetails = {
		readonly size: Maybe<Scalars["Int"]>;
	};

	type ContentfulAssetFileDetailsFilterInput = {
		readonly size: InputMaybe<IntQueryOperatorInput>;
	};

	type ContentfulAssetFileFilterInput = {
		readonly contentType: InputMaybe<StringQueryOperatorInput>;
		readonly details: InputMaybe<ContentfulAssetFileDetailsFilterInput>;
		readonly fileName: InputMaybe<StringQueryOperatorInput>;
		readonly url: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulAssetFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly file: InputMaybe<ContentfulAssetFileFilterInput>;
		readonly filename: InputMaybe<StringQueryOperatorInput>;
		readonly filesize: InputMaybe<IntQueryOperatorInput>;
		readonly gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
		readonly gatsbyImageData: InputMaybe<JSONQueryOperatorInput>;
		readonly height: InputMaybe<IntQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly mimeType: InputMaybe<StringQueryOperatorInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly placeholderUrl: InputMaybe<StringQueryOperatorInput>;
		readonly publicUrl: InputMaybe<StringQueryOperatorInput>;
		readonly resize: InputMaybe<RemoteFileResizeFilterInput>;
		readonly size: InputMaybe<IntQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulAssetSysFilterInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
		readonly url: InputMaybe<StringQueryOperatorInput>;
		readonly width: InputMaybe<IntQueryOperatorInput>;
	};

	type ContentfulAssetFilterListInput = {
		readonly elemMatch: InputMaybe<ContentfulAssetFilterInput>;
	};

	type ContentfulAssetGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<ContentfulAssetEdge>;
		readonly field: Scalars["String"];
		readonly fieldValue: Maybe<Scalars["String"]>;
		readonly group: ReadonlyArray<ContentfulAssetGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<ContentfulAsset>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type ContentfulAssetGroupConnection_distinctArgs = {
		field: ContentfulAssetFieldsEnum;
	};

	type ContentfulAssetGroupConnection_groupArgs = {
		field: ContentfulAssetFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type ContentfulAssetGroupConnection_maxArgs = {
		field: ContentfulAssetFieldsEnum;
	};

	type ContentfulAssetGroupConnection_minArgs = {
		field: ContentfulAssetFieldsEnum;
	};

	type ContentfulAssetGroupConnection_sumArgs = {
		field: ContentfulAssetFieldsEnum;
	};

	type ContentfulAssetSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAssetFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type ContentfulAssetSys = {
		readonly revision: Maybe<Scalars["Int"]>;
		readonly type: Maybe<Scalars["String"]>;
	};

	type ContentfulAssetSysFilterInput = {
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulContentType = Node & {
		readonly children: ReadonlyArray<Node>;
		readonly description: Maybe<Scalars["String"]>;
		readonly id: Scalars["ID"];
		readonly internal: Internal;
		readonly name: Maybe<Scalars["String"]>;
		readonly parent: Maybe<Node>;
		readonly sys: Maybe<ContentfulContentTypeSys>;
	};

	type ContentfulContentTypeConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<ContentfulContentTypeEdge>;
		readonly group: ReadonlyArray<ContentfulContentTypeGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<ContentfulContentType>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type ContentfulContentTypeConnection_distinctArgs = {
		field: ContentfulContentTypeFieldsEnum;
	};

	type ContentfulContentTypeConnection_groupArgs = {
		field: ContentfulContentTypeFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type ContentfulContentTypeConnection_maxArgs = {
		field: ContentfulContentTypeFieldsEnum;
	};

	type ContentfulContentTypeConnection_minArgs = {
		field: ContentfulContentTypeFieldsEnum;
	};

	type ContentfulContentTypeConnection_sumArgs = {
		field: ContentfulContentTypeFieldsEnum;
	};

	type ContentfulContentTypeEdge = {
		readonly next: Maybe<ContentfulContentType>;
		readonly node: ContentfulContentType;
		readonly previous: Maybe<ContentfulContentType>;
	};

	type ContentfulContentTypeFieldsEnum =
		| "children"
		| "children.children"
		| "children.children.children"
		| "children.children.children.children"
		| "children.children.children.id"
		| "children.children.id"
		| "children.children.internal.content"
		| "children.children.internal.contentDigest"
		| "children.children.internal.description"
		| "children.children.internal.fieldOwners"
		| "children.children.internal.ignoreType"
		| "children.children.internal.mediaType"
		| "children.children.internal.owner"
		| "children.children.internal.type"
		| "children.children.parent.children"
		| "children.children.parent.id"
		| "children.id"
		| "children.internal.content"
		| "children.internal.contentDigest"
		| "children.internal.description"
		| "children.internal.fieldOwners"
		| "children.internal.ignoreType"
		| "children.internal.mediaType"
		| "children.internal.owner"
		| "children.internal.type"
		| "children.parent.children"
		| "children.parent.children.children"
		| "children.parent.children.id"
		| "children.parent.id"
		| "children.parent.internal.content"
		| "children.parent.internal.contentDigest"
		| "children.parent.internal.description"
		| "children.parent.internal.fieldOwners"
		| "children.parent.internal.ignoreType"
		| "children.parent.internal.mediaType"
		| "children.parent.internal.owner"
		| "children.parent.internal.type"
		| "children.parent.parent.children"
		| "children.parent.parent.id"
		| "description"
		| "id"
		| "internal.content"
		| "internal.contentDigest"
		| "internal.description"
		| "internal.fieldOwners"
		| "internal.ignoreType"
		| "internal.mediaType"
		| "internal.owner"
		| "internal.type"
		| "name"
		| "parent.children"
		| "parent.children.children"
		| "parent.children.children.children"
		| "parent.children.children.id"
		| "parent.children.id"
		| "parent.children.internal.content"
		| "parent.children.internal.contentDigest"
		| "parent.children.internal.description"
		| "parent.children.internal.fieldOwners"
		| "parent.children.internal.ignoreType"
		| "parent.children.internal.mediaType"
		| "parent.children.internal.owner"
		| "parent.children.internal.type"
		| "parent.children.parent.children"
		| "parent.children.parent.id"
		| "parent.id"
		| "parent.internal.content"
		| "parent.internal.contentDigest"
		| "parent.internal.description"
		| "parent.internal.fieldOwners"
		| "parent.internal.ignoreType"
		| "parent.internal.mediaType"
		| "parent.internal.owner"
		| "parent.internal.type"
		| "parent.parent.children"
		| "parent.parent.children.children"
		| "parent.parent.children.id"
		| "parent.parent.id"
		| "parent.parent.internal.content"
		| "parent.parent.internal.contentDigest"
		| "parent.parent.internal.description"
		| "parent.parent.internal.fieldOwners"
		| "parent.parent.internal.ignoreType"
		| "parent.parent.internal.mediaType"
		| "parent.parent.internal.owner"
		| "parent.parent.internal.type"
		| "parent.parent.parent.children"
		| "parent.parent.parent.id"
		| "sys.type";

	type ContentfulContentTypeFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly sys: InputMaybe<ContentfulContentTypeSysFilterInput>;
	};

	type ContentfulContentTypeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<ContentfulContentTypeEdge>;
		readonly field: Scalars["String"];
		readonly fieldValue: Maybe<Scalars["String"]>;
		readonly group: ReadonlyArray<ContentfulContentTypeGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<ContentfulContentType>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type ContentfulContentTypeGroupConnection_distinctArgs = {
		field: ContentfulContentTypeFieldsEnum;
	};

	type ContentfulContentTypeGroupConnection_groupArgs = {
		field: ContentfulContentTypeFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type ContentfulContentTypeGroupConnection_maxArgs = {
		field: ContentfulContentTypeFieldsEnum;
	};

	type ContentfulContentTypeGroupConnection_minArgs = {
		field: ContentfulContentTypeFieldsEnum;
	};

	type ContentfulContentTypeGroupConnection_sumArgs = {
		field: ContentfulContentTypeFieldsEnum;
	};

	type ContentfulContentTypeSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulContentTypeFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type ContentfulContentTypeSys = {
		readonly type: Maybe<Scalars["String"]>;
	};

	type ContentfulContentTypeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulEntry = {
		readonly children: ReadonlyArray<Node>;
		readonly contentful_id: Scalars["String"];
		readonly id: Scalars["ID"];
		readonly internal: Internal;
		readonly node_locale: Scalars["String"];
		readonly parent: Maybe<Node>;
	};

	type ContentfulEntryConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<ContentfulEntryEdge>;
		readonly group: ReadonlyArray<ContentfulEntryGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<ContentfulEntry>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type ContentfulEntryConnection_distinctArgs = {
		field: ContentfulEntryFieldsEnum;
	};

	type ContentfulEntryConnection_groupArgs = {
		field: ContentfulEntryFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type ContentfulEntryConnection_maxArgs = {
		field: ContentfulEntryFieldsEnum;
	};

	type ContentfulEntryConnection_minArgs = {
		field: ContentfulEntryFieldsEnum;
	};

	type ContentfulEntryConnection_sumArgs = {
		field: ContentfulEntryFieldsEnum;
	};

	type ContentfulEntryEdge = {
		readonly next: Maybe<ContentfulEntry>;
		readonly node: ContentfulEntry;
		readonly previous: Maybe<ContentfulEntry>;
	};

	type ContentfulEntryFieldsEnum =
		| "children"
		| "children.children"
		| "children.children.children"
		| "children.children.children.children"
		| "children.children.children.id"
		| "children.children.id"
		| "children.children.internal.content"
		| "children.children.internal.contentDigest"
		| "children.children.internal.description"
		| "children.children.internal.fieldOwners"
		| "children.children.internal.ignoreType"
		| "children.children.internal.mediaType"
		| "children.children.internal.owner"
		| "children.children.internal.type"
		| "children.children.parent.children"
		| "children.children.parent.id"
		| "children.id"
		| "children.internal.content"
		| "children.internal.contentDigest"
		| "children.internal.description"
		| "children.internal.fieldOwners"
		| "children.internal.ignoreType"
		| "children.internal.mediaType"
		| "children.internal.owner"
		| "children.internal.type"
		| "children.parent.children"
		| "children.parent.children.children"
		| "children.parent.children.id"
		| "children.parent.id"
		| "children.parent.internal.content"
		| "children.parent.internal.contentDigest"
		| "children.parent.internal.description"
		| "children.parent.internal.fieldOwners"
		| "children.parent.internal.ignoreType"
		| "children.parent.internal.mediaType"
		| "children.parent.internal.owner"
		| "children.parent.internal.type"
		| "children.parent.parent.children"
		| "children.parent.parent.id"
		| "contentful_id"
		| "id"
		| "internal.content"
		| "internal.contentDigest"
		| "internal.description"
		| "internal.fieldOwners"
		| "internal.ignoreType"
		| "internal.mediaType"
		| "internal.owner"
		| "internal.type"
		| "node_locale"
		| "parent.children"
		| "parent.children.children"
		| "parent.children.children.children"
		| "parent.children.children.id"
		| "parent.children.id"
		| "parent.children.internal.content"
		| "parent.children.internal.contentDigest"
		| "parent.children.internal.description"
		| "parent.children.internal.fieldOwners"
		| "parent.children.internal.ignoreType"
		| "parent.children.internal.mediaType"
		| "parent.children.internal.owner"
		| "parent.children.internal.type"
		| "parent.children.parent.children"
		| "parent.children.parent.id"
		| "parent.id"
		| "parent.internal.content"
		| "parent.internal.contentDigest"
		| "parent.internal.description"
		| "parent.internal.fieldOwners"
		| "parent.internal.ignoreType"
		| "parent.internal.mediaType"
		| "parent.internal.owner"
		| "parent.internal.type"
		| "parent.parent.children"
		| "parent.parent.children.children"
		| "parent.parent.children.id"
		| "parent.parent.id"
		| "parent.parent.internal.content"
		| "parent.parent.internal.contentDigest"
		| "parent.parent.internal.description"
		| "parent.parent.internal.fieldOwners"
		| "parent.parent.internal.ignoreType"
		| "parent.parent.internal.mediaType"
		| "parent.parent.internal.owner"
		| "parent.parent.internal.type"
		| "parent.parent.parent.children"
		| "parent.parent.parent.id";

	type ContentfulEntryFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
	};

	type ContentfulEntryGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<ContentfulEntryEdge>;
		readonly field: Scalars["String"];
		readonly fieldValue: Maybe<Scalars["String"]>;
		readonly group: ReadonlyArray<ContentfulEntryGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<ContentfulEntry>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type ContentfulEntryGroupConnection_distinctArgs = {
		field: ContentfulEntryFieldsEnum;
	};

	type ContentfulEntryGroupConnection_groupArgs = {
		field: ContentfulEntryFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type ContentfulEntryGroupConnection_maxArgs = {
		field: ContentfulEntryFieldsEnum;
	};

	type ContentfulEntryGroupConnection_minArgs = {
		field: ContentfulEntryFieldsEnum;
	};

	type ContentfulEntryGroupConnection_sumArgs = {
		field: ContentfulEntryFieldsEnum;
	};

	type ContentfulEntrySortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulEntryFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type ContentfulHomePage = ContentfulEntry &
		ContentfulReference &
		Node & {
			readonly backgroundVideos: Maybe<ReadonlyArray<Maybe<ContentfulAsset>>>;
			readonly children: ReadonlyArray<Node>;
			readonly contentful_id: Scalars["String"];
			readonly createdAt: Maybe<Scalars["Date"]>;
			readonly hero: Maybe<ContentfulHomePageHero>;
			readonly id: Scalars["ID"];
			readonly internal: Internal;
			readonly node_locale: Scalars["String"];
			readonly parent: Maybe<Node>;
			readonly preHero: Maybe<ContentfulHomePagePreHero>;
			readonly spaceId: Maybe<Scalars["String"]>;
			readonly sys: Maybe<ContentfulHomePageSys>;
			readonly updatedAt: Maybe<Scalars["Date"]>;
		};

	type ContentfulHomePage_createdAtArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type ContentfulHomePage_updatedAtArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type ContentfulHomePageConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<ContentfulHomePageEdge>;
		readonly group: ReadonlyArray<ContentfulHomePageGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<ContentfulHomePage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type ContentfulHomePageConnection_distinctArgs = {
		field: ContentfulHomePageFieldsEnum;
	};

	type ContentfulHomePageConnection_groupArgs = {
		field: ContentfulHomePageFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type ContentfulHomePageConnection_maxArgs = {
		field: ContentfulHomePageFieldsEnum;
	};

	type ContentfulHomePageConnection_minArgs = {
		field: ContentfulHomePageFieldsEnum;
	};

	type ContentfulHomePageConnection_sumArgs = {
		field: ContentfulHomePageFieldsEnum;
	};

	type ContentfulHomePageEdge = {
		readonly next: Maybe<ContentfulHomePage>;
		readonly node: ContentfulHomePage;
		readonly previous: Maybe<ContentfulHomePage>;
	};

	type ContentfulHomePageFieldsEnum =
		| "backgroundVideos"
		| "backgroundVideos.children"
		| "backgroundVideos.children.children"
		| "backgroundVideos.children.children.children"
		| "backgroundVideos.children.children.id"
		| "backgroundVideos.children.id"
		| "backgroundVideos.children.internal.content"
		| "backgroundVideos.children.internal.contentDigest"
		| "backgroundVideos.children.internal.description"
		| "backgroundVideos.children.internal.fieldOwners"
		| "backgroundVideos.children.internal.ignoreType"
		| "backgroundVideos.children.internal.mediaType"
		| "backgroundVideos.children.internal.owner"
		| "backgroundVideos.children.internal.type"
		| "backgroundVideos.children.parent.children"
		| "backgroundVideos.children.parent.id"
		| "backgroundVideos.contentful_id"
		| "backgroundVideos.createdAt"
		| "backgroundVideos.description"
		| "backgroundVideos.file.contentType"
		| "backgroundVideos.file.details.size"
		| "backgroundVideos.file.fileName"
		| "backgroundVideos.file.url"
		| "backgroundVideos.filename"
		| "backgroundVideos.filesize"
		| "backgroundVideos.gatsbyImage"
		| "backgroundVideos.gatsbyImageData"
		| "backgroundVideos.height"
		| "backgroundVideos.id"
		| "backgroundVideos.internal.content"
		| "backgroundVideos.internal.contentDigest"
		| "backgroundVideos.internal.description"
		| "backgroundVideos.internal.fieldOwners"
		| "backgroundVideos.internal.ignoreType"
		| "backgroundVideos.internal.mediaType"
		| "backgroundVideos.internal.owner"
		| "backgroundVideos.internal.type"
		| "backgroundVideos.mimeType"
		| "backgroundVideos.node_locale"
		| "backgroundVideos.parent.children"
		| "backgroundVideos.parent.children.children"
		| "backgroundVideos.parent.children.id"
		| "backgroundVideos.parent.id"
		| "backgroundVideos.parent.internal.content"
		| "backgroundVideos.parent.internal.contentDigest"
		| "backgroundVideos.parent.internal.description"
		| "backgroundVideos.parent.internal.fieldOwners"
		| "backgroundVideos.parent.internal.ignoreType"
		| "backgroundVideos.parent.internal.mediaType"
		| "backgroundVideos.parent.internal.owner"
		| "backgroundVideos.parent.internal.type"
		| "backgroundVideos.parent.parent.children"
		| "backgroundVideos.parent.parent.id"
		| "backgroundVideos.placeholderUrl"
		| "backgroundVideos.publicUrl"
		| "backgroundVideos.resize.height"
		| "backgroundVideos.resize.src"
		| "backgroundVideos.resize.width"
		| "backgroundVideos.size"
		| "backgroundVideos.spaceId"
		| "backgroundVideos.sys.revision"
		| "backgroundVideos.sys.type"
		| "backgroundVideos.title"
		| "backgroundVideos.updatedAt"
		| "backgroundVideos.url"
		| "backgroundVideos.width"
		| "children"
		| "children.children"
		| "children.children.children"
		| "children.children.children.children"
		| "children.children.children.id"
		| "children.children.id"
		| "children.children.internal.content"
		| "children.children.internal.contentDigest"
		| "children.children.internal.description"
		| "children.children.internal.fieldOwners"
		| "children.children.internal.ignoreType"
		| "children.children.internal.mediaType"
		| "children.children.internal.owner"
		| "children.children.internal.type"
		| "children.children.parent.children"
		| "children.children.parent.id"
		| "children.id"
		| "children.internal.content"
		| "children.internal.contentDigest"
		| "children.internal.description"
		| "children.internal.fieldOwners"
		| "children.internal.ignoreType"
		| "children.internal.mediaType"
		| "children.internal.owner"
		| "children.internal.type"
		| "children.parent.children"
		| "children.parent.children.children"
		| "children.parent.children.id"
		| "children.parent.id"
		| "children.parent.internal.content"
		| "children.parent.internal.contentDigest"
		| "children.parent.internal.description"
		| "children.parent.internal.fieldOwners"
		| "children.parent.internal.ignoreType"
		| "children.parent.internal.mediaType"
		| "children.parent.internal.owner"
		| "children.parent.internal.type"
		| "children.parent.parent.children"
		| "children.parent.parent.id"
		| "contentful_id"
		| "createdAt"
		| "hero.raw"
		| "id"
		| "internal.content"
		| "internal.contentDigest"
		| "internal.description"
		| "internal.fieldOwners"
		| "internal.ignoreType"
		| "internal.mediaType"
		| "internal.owner"
		| "internal.type"
		| "node_locale"
		| "parent.children"
		| "parent.children.children"
		| "parent.children.children.children"
		| "parent.children.children.id"
		| "parent.children.id"
		| "parent.children.internal.content"
		| "parent.children.internal.contentDigest"
		| "parent.children.internal.description"
		| "parent.children.internal.fieldOwners"
		| "parent.children.internal.ignoreType"
		| "parent.children.internal.mediaType"
		| "parent.children.internal.owner"
		| "parent.children.internal.type"
		| "parent.children.parent.children"
		| "parent.children.parent.id"
		| "parent.id"
		| "parent.internal.content"
		| "parent.internal.contentDigest"
		| "parent.internal.description"
		| "parent.internal.fieldOwners"
		| "parent.internal.ignoreType"
		| "parent.internal.mediaType"
		| "parent.internal.owner"
		| "parent.internal.type"
		| "parent.parent.children"
		| "parent.parent.children.children"
		| "parent.parent.children.id"
		| "parent.parent.id"
		| "parent.parent.internal.content"
		| "parent.parent.internal.contentDigest"
		| "parent.parent.internal.description"
		| "parent.parent.internal.fieldOwners"
		| "parent.parent.internal.ignoreType"
		| "parent.parent.internal.mediaType"
		| "parent.parent.internal.owner"
		| "parent.parent.internal.type"
		| "parent.parent.parent.children"
		| "parent.parent.parent.id"
		| "preHero.raw"
		| "spaceId"
		| "sys.contentType.sys.id"
		| "sys.contentType.sys.linkType"
		| "sys.contentType.sys.type"
		| "sys.revision"
		| "sys.type"
		| "updatedAt";

	type ContentfulHomePageFilterInput = {
		readonly backgroundVideos: InputMaybe<ContentfulAssetFilterListInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly hero: InputMaybe<ContentfulHomePageHeroFilterInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly preHero: InputMaybe<ContentfulHomePagePreHeroFilterInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulHomePageSysFilterInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulHomePageGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<ContentfulHomePageEdge>;
		readonly field: Scalars["String"];
		readonly fieldValue: Maybe<Scalars["String"]>;
		readonly group: ReadonlyArray<ContentfulHomePageGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<ContentfulHomePage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type ContentfulHomePageGroupConnection_distinctArgs = {
		field: ContentfulHomePageFieldsEnum;
	};

	type ContentfulHomePageGroupConnection_groupArgs = {
		field: ContentfulHomePageFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type ContentfulHomePageGroupConnection_maxArgs = {
		field: ContentfulHomePageFieldsEnum;
	};

	type ContentfulHomePageGroupConnection_minArgs = {
		field: ContentfulHomePageFieldsEnum;
	};

	type ContentfulHomePageGroupConnection_sumArgs = {
		field: ContentfulHomePageFieldsEnum;
	};

	type ContentfulHomePageHero = {
		readonly raw: Maybe<Scalars["String"]>;
	};

	type ContentfulHomePageHeroFilterInput = {
		readonly raw: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulHomePagePreHero = {
		readonly raw: Maybe<Scalars["String"]>;
	};

	type ContentfulHomePagePreHeroFilterInput = {
		readonly raw: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulHomePageSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentfulHomePageFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type ContentfulHomePageSys = {
		readonly contentType: Maybe<ContentfulHomePageSysContentType>;
		readonly revision: Maybe<Scalars["Int"]>;
		readonly type: Maybe<Scalars["String"]>;
	};

	type ContentfulHomePageSysContentType = {
		readonly sys: Maybe<ContentfulHomePageSysContentTypeSys>;
	};

	type ContentfulHomePageSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulHomePageSysContentTypeSysFilterInput>;
	};

	type ContentfulHomePageSysContentTypeSys = {
		readonly id: Maybe<Scalars["String"]>;
		readonly linkType: Maybe<Scalars["String"]>;
		readonly type: Maybe<Scalars["String"]>;
	};

	type ContentfulHomePageSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulHomePageSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulHomePageSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulImageCropFocus =
		| "bottom"
		| "bottom_right"
		| "bottom_left"
		| "center"
		| "face"
		| "faces"
		| "left"
		| "right"
		| "top"
		| "top_left"
		| "top_right";

	type ContentfulReference = {
		readonly contentful_id: Scalars["String"];
		readonly id: Scalars["ID"];
	};

	type DateQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars["Date"]>;
		readonly gt: InputMaybe<Scalars["Date"]>;
		readonly gte: InputMaybe<Scalars["Date"]>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Date"]>>>;
		readonly lt: InputMaybe<Scalars["Date"]>;
		readonly lte: InputMaybe<Scalars["Date"]>;
		readonly ne: InputMaybe<Scalars["Date"]>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Date"]>>>;
	};

	type Directory = Node & {
		readonly absolutePath: Scalars["String"];
		readonly accessTime: Scalars["Date"];
		readonly atime: Scalars["Date"];
		readonly atimeMs: Scalars["Float"];
		readonly base: Scalars["String"];
		readonly birthTime: Scalars["Date"];
		/** @deprecated Use `birthTime` instead */
		readonly birthtime: Maybe<Scalars["Date"]>;
		/** @deprecated Use `birthTime` instead */
		readonly birthtimeMs: Maybe<Scalars["Float"]>;
		readonly changeTime: Scalars["Date"];
		readonly children: ReadonlyArray<Node>;
		readonly ctime: Scalars["Date"];
		readonly ctimeMs: Scalars["Float"];
		readonly dev: Scalars["Int"];
		readonly dir: Scalars["String"];
		readonly ext: Scalars["String"];
		readonly extension: Scalars["String"];
		readonly gid: Scalars["Int"];
		readonly id: Scalars["ID"];
		readonly ino: Scalars["Float"];
		readonly internal: Internal;
		readonly mode: Scalars["Int"];
		readonly modifiedTime: Scalars["Date"];
		readonly mtime: Scalars["Date"];
		readonly mtimeMs: Scalars["Float"];
		readonly name: Scalars["String"];
		readonly nlink: Scalars["Int"];
		readonly parent: Maybe<Node>;
		readonly prettySize: Scalars["String"];
		readonly rdev: Scalars["Int"];
		readonly relativeDirectory: Scalars["String"];
		readonly relativePath: Scalars["String"];
		readonly root: Scalars["String"];
		readonly size: Scalars["Int"];
		readonly sourceInstanceName: Scalars["String"];
		readonly uid: Scalars["Int"];
	};

	type Directory_accessTimeArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type Directory_atimeArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type Directory_birthTimeArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type Directory_changeTimeArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type Directory_ctimeArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type Directory_modifiedTimeArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type Directory_mtimeArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type DirectoryConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<DirectoryEdge>;
		readonly group: ReadonlyArray<DirectoryGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<Directory>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type DirectoryConnection_distinctArgs = {
		field: DirectoryFieldsEnum;
	};

	type DirectoryConnection_groupArgs = {
		field: DirectoryFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type DirectoryConnection_maxArgs = {
		field: DirectoryFieldsEnum;
	};

	type DirectoryConnection_minArgs = {
		field: DirectoryFieldsEnum;
	};

	type DirectoryConnection_sumArgs = {
		field: DirectoryFieldsEnum;
	};

	type DirectoryEdge = {
		readonly next: Maybe<Directory>;
		readonly node: Directory;
		readonly previous: Maybe<Directory>;
	};

	type DirectoryFieldsEnum =
		| "absolutePath"
		| "accessTime"
		| "atime"
		| "atimeMs"
		| "base"
		| "birthTime"
		| "birthtime"
		| "birthtimeMs"
		| "changeTime"
		| "children"
		| "children.children"
		| "children.children.children"
		| "children.children.children.children"
		| "children.children.children.id"
		| "children.children.id"
		| "children.children.internal.content"
		| "children.children.internal.contentDigest"
		| "children.children.internal.description"
		| "children.children.internal.fieldOwners"
		| "children.children.internal.ignoreType"
		| "children.children.internal.mediaType"
		| "children.children.internal.owner"
		| "children.children.internal.type"
		| "children.children.parent.children"
		| "children.children.parent.id"
		| "children.id"
		| "children.internal.content"
		| "children.internal.contentDigest"
		| "children.internal.description"
		| "children.internal.fieldOwners"
		| "children.internal.ignoreType"
		| "children.internal.mediaType"
		| "children.internal.owner"
		| "children.internal.type"
		| "children.parent.children"
		| "children.parent.children.children"
		| "children.parent.children.id"
		| "children.parent.id"
		| "children.parent.internal.content"
		| "children.parent.internal.contentDigest"
		| "children.parent.internal.description"
		| "children.parent.internal.fieldOwners"
		| "children.parent.internal.ignoreType"
		| "children.parent.internal.mediaType"
		| "children.parent.internal.owner"
		| "children.parent.internal.type"
		| "children.parent.parent.children"
		| "children.parent.parent.id"
		| "ctime"
		| "ctimeMs"
		| "dev"
		| "dir"
		| "ext"
		| "extension"
		| "gid"
		| "id"
		| "ino"
		| "internal.content"
		| "internal.contentDigest"
		| "internal.description"
		| "internal.fieldOwners"
		| "internal.ignoreType"
		| "internal.mediaType"
		| "internal.owner"
		| "internal.type"
		| "mode"
		| "modifiedTime"
		| "mtime"
		| "mtimeMs"
		| "name"
		| "nlink"
		| "parent.children"
		| "parent.children.children"
		| "parent.children.children.children"
		| "parent.children.children.id"
		| "parent.children.id"
		| "parent.children.internal.content"
		| "parent.children.internal.contentDigest"
		| "parent.children.internal.description"
		| "parent.children.internal.fieldOwners"
		| "parent.children.internal.ignoreType"
		| "parent.children.internal.mediaType"
		| "parent.children.internal.owner"
		| "parent.children.internal.type"
		| "parent.children.parent.children"
		| "parent.children.parent.id"
		| "parent.id"
		| "parent.internal.content"
		| "parent.internal.contentDigest"
		| "parent.internal.description"
		| "parent.internal.fieldOwners"
		| "parent.internal.ignoreType"
		| "parent.internal.mediaType"
		| "parent.internal.owner"
		| "parent.internal.type"
		| "parent.parent.children"
		| "parent.parent.children.children"
		| "parent.parent.children.id"
		| "parent.parent.id"
		| "parent.parent.internal.content"
		| "parent.parent.internal.contentDigest"
		| "parent.parent.internal.description"
		| "parent.parent.internal.fieldOwners"
		| "parent.parent.internal.ignoreType"
		| "parent.parent.internal.mediaType"
		| "parent.parent.internal.owner"
		| "parent.parent.internal.type"
		| "parent.parent.parent.children"
		| "parent.parent.parent.id"
		| "prettySize"
		| "rdev"
		| "relativeDirectory"
		| "relativePath"
		| "root"
		| "size"
		| "sourceInstanceName"
		| "uid";

	type DirectoryFilterInput = {
		readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
		readonly accessTime: InputMaybe<DateQueryOperatorInput>;
		readonly atime: InputMaybe<DateQueryOperatorInput>;
		readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly base: InputMaybe<StringQueryOperatorInput>;
		readonly birthTime: InputMaybe<DateQueryOperatorInput>;
		readonly birthtime: InputMaybe<DateQueryOperatorInput>;
		readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly changeTime: InputMaybe<DateQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly ctime: InputMaybe<DateQueryOperatorInput>;
		readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly dev: InputMaybe<IntQueryOperatorInput>;
		readonly dir: InputMaybe<StringQueryOperatorInput>;
		readonly ext: InputMaybe<StringQueryOperatorInput>;
		readonly extension: InputMaybe<StringQueryOperatorInput>;
		readonly gid: InputMaybe<IntQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly ino: InputMaybe<FloatQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly mode: InputMaybe<IntQueryOperatorInput>;
		readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
		readonly mtime: InputMaybe<DateQueryOperatorInput>;
		readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nlink: InputMaybe<IntQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly prettySize: InputMaybe<StringQueryOperatorInput>;
		readonly rdev: InputMaybe<IntQueryOperatorInput>;
		readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
		readonly relativePath: InputMaybe<StringQueryOperatorInput>;
		readonly root: InputMaybe<StringQueryOperatorInput>;
		readonly size: InputMaybe<IntQueryOperatorInput>;
		readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
		readonly uid: InputMaybe<IntQueryOperatorInput>;
	};

	type DirectoryGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<DirectoryEdge>;
		readonly field: Scalars["String"];
		readonly fieldValue: Maybe<Scalars["String"]>;
		readonly group: ReadonlyArray<DirectoryGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<Directory>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type DirectoryGroupConnection_distinctArgs = {
		field: DirectoryFieldsEnum;
	};

	type DirectoryGroupConnection_groupArgs = {
		field: DirectoryFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type DirectoryGroupConnection_maxArgs = {
		field: DirectoryFieldsEnum;
	};

	type DirectoryGroupConnection_minArgs = {
		field: DirectoryFieldsEnum;
	};

	type DirectoryGroupConnection_sumArgs = {
		field: DirectoryFieldsEnum;
	};

	type DirectorySortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<DirectoryFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type File = Node & {
		readonly absolutePath: Scalars["String"];
		readonly accessTime: Scalars["Date"];
		readonly atime: Scalars["Date"];
		readonly atimeMs: Scalars["Float"];
		readonly base: Scalars["String"];
		readonly birthTime: Scalars["Date"];
		/** @deprecated Use `birthTime` instead */
		readonly birthtime: Maybe<Scalars["Date"]>;
		/** @deprecated Use `birthTime` instead */
		readonly birthtimeMs: Maybe<Scalars["Float"]>;
		readonly changeTime: Scalars["Date"];
		readonly children: ReadonlyArray<Node>;
		readonly ctime: Scalars["Date"];
		readonly ctimeMs: Scalars["Float"];
		readonly dev: Scalars["Int"];
		readonly dir: Scalars["String"];
		readonly ext: Scalars["String"];
		readonly extension: Scalars["String"];
		readonly gid: Scalars["Int"];
		readonly id: Scalars["ID"];
		readonly ino: Scalars["Float"];
		readonly internal: Internal;
		readonly mode: Scalars["Int"];
		readonly modifiedTime: Scalars["Date"];
		readonly mtime: Scalars["Date"];
		readonly mtimeMs: Scalars["Float"];
		readonly name: Scalars["String"];
		readonly nlink: Scalars["Int"];
		readonly parent: Maybe<Node>;
		readonly prettySize: Scalars["String"];
		readonly rdev: Scalars["Int"];
		readonly relativeDirectory: Scalars["String"];
		readonly relativePath: Scalars["String"];
		readonly root: Scalars["String"];
		readonly size: Scalars["Int"];
		readonly sourceInstanceName: Scalars["String"];
		readonly uid: Scalars["Int"];
	};

	type File_accessTimeArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type File_atimeArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type File_birthTimeArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type File_changeTimeArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type File_ctimeArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type File_modifiedTimeArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type File_mtimeArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type FileConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<FileEdge>;
		readonly group: ReadonlyArray<FileGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<File>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type FileConnection_distinctArgs = {
		field: FileFieldsEnum;
	};

	type FileConnection_groupArgs = {
		field: FileFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type FileConnection_maxArgs = {
		field: FileFieldsEnum;
	};

	type FileConnection_minArgs = {
		field: FileFieldsEnum;
	};

	type FileConnection_sumArgs = {
		field: FileFieldsEnum;
	};

	type FileEdge = {
		readonly next: Maybe<File>;
		readonly node: File;
		readonly previous: Maybe<File>;
	};

	type FileFieldsEnum =
		| "absolutePath"
		| "accessTime"
		| "atime"
		| "atimeMs"
		| "base"
		| "birthTime"
		| "birthtime"
		| "birthtimeMs"
		| "changeTime"
		| "children"
		| "children.children"
		| "children.children.children"
		| "children.children.children.children"
		| "children.children.children.id"
		| "children.children.id"
		| "children.children.internal.content"
		| "children.children.internal.contentDigest"
		| "children.children.internal.description"
		| "children.children.internal.fieldOwners"
		| "children.children.internal.ignoreType"
		| "children.children.internal.mediaType"
		| "children.children.internal.owner"
		| "children.children.internal.type"
		| "children.children.parent.children"
		| "children.children.parent.id"
		| "children.id"
		| "children.internal.content"
		| "children.internal.contentDigest"
		| "children.internal.description"
		| "children.internal.fieldOwners"
		| "children.internal.ignoreType"
		| "children.internal.mediaType"
		| "children.internal.owner"
		| "children.internal.type"
		| "children.parent.children"
		| "children.parent.children.children"
		| "children.parent.children.id"
		| "children.parent.id"
		| "children.parent.internal.content"
		| "children.parent.internal.contentDigest"
		| "children.parent.internal.description"
		| "children.parent.internal.fieldOwners"
		| "children.parent.internal.ignoreType"
		| "children.parent.internal.mediaType"
		| "children.parent.internal.owner"
		| "children.parent.internal.type"
		| "children.parent.parent.children"
		| "children.parent.parent.id"
		| "ctime"
		| "ctimeMs"
		| "dev"
		| "dir"
		| "ext"
		| "extension"
		| "gid"
		| "id"
		| "ino"
		| "internal.content"
		| "internal.contentDigest"
		| "internal.description"
		| "internal.fieldOwners"
		| "internal.ignoreType"
		| "internal.mediaType"
		| "internal.owner"
		| "internal.type"
		| "mode"
		| "modifiedTime"
		| "mtime"
		| "mtimeMs"
		| "name"
		| "nlink"
		| "parent.children"
		| "parent.children.children"
		| "parent.children.children.children"
		| "parent.children.children.id"
		| "parent.children.id"
		| "parent.children.internal.content"
		| "parent.children.internal.contentDigest"
		| "parent.children.internal.description"
		| "parent.children.internal.fieldOwners"
		| "parent.children.internal.ignoreType"
		| "parent.children.internal.mediaType"
		| "parent.children.internal.owner"
		| "parent.children.internal.type"
		| "parent.children.parent.children"
		| "parent.children.parent.id"
		| "parent.id"
		| "parent.internal.content"
		| "parent.internal.contentDigest"
		| "parent.internal.description"
		| "parent.internal.fieldOwners"
		| "parent.internal.ignoreType"
		| "parent.internal.mediaType"
		| "parent.internal.owner"
		| "parent.internal.type"
		| "parent.parent.children"
		| "parent.parent.children.children"
		| "parent.parent.children.id"
		| "parent.parent.id"
		| "parent.parent.internal.content"
		| "parent.parent.internal.contentDigest"
		| "parent.parent.internal.description"
		| "parent.parent.internal.fieldOwners"
		| "parent.parent.internal.ignoreType"
		| "parent.parent.internal.mediaType"
		| "parent.parent.internal.owner"
		| "parent.parent.internal.type"
		| "parent.parent.parent.children"
		| "parent.parent.parent.id"
		| "prettySize"
		| "rdev"
		| "relativeDirectory"
		| "relativePath"
		| "root"
		| "size"
		| "sourceInstanceName"
		| "uid";

	type FileFilterInput = {
		readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
		readonly accessTime: InputMaybe<DateQueryOperatorInput>;
		readonly atime: InputMaybe<DateQueryOperatorInput>;
		readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly base: InputMaybe<StringQueryOperatorInput>;
		readonly birthTime: InputMaybe<DateQueryOperatorInput>;
		readonly birthtime: InputMaybe<DateQueryOperatorInput>;
		readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly changeTime: InputMaybe<DateQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly ctime: InputMaybe<DateQueryOperatorInput>;
		readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly dev: InputMaybe<IntQueryOperatorInput>;
		readonly dir: InputMaybe<StringQueryOperatorInput>;
		readonly ext: InputMaybe<StringQueryOperatorInput>;
		readonly extension: InputMaybe<StringQueryOperatorInput>;
		readonly gid: InputMaybe<IntQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly ino: InputMaybe<FloatQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly mode: InputMaybe<IntQueryOperatorInput>;
		readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
		readonly mtime: InputMaybe<DateQueryOperatorInput>;
		readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nlink: InputMaybe<IntQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly prettySize: InputMaybe<StringQueryOperatorInput>;
		readonly rdev: InputMaybe<IntQueryOperatorInput>;
		readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
		readonly relativePath: InputMaybe<StringQueryOperatorInput>;
		readonly root: InputMaybe<StringQueryOperatorInput>;
		readonly size: InputMaybe<IntQueryOperatorInput>;
		readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
		readonly uid: InputMaybe<IntQueryOperatorInput>;
	};

	type FileGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<FileEdge>;
		readonly field: Scalars["String"];
		readonly fieldValue: Maybe<Scalars["String"]>;
		readonly group: ReadonlyArray<FileGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<File>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type FileGroupConnection_distinctArgs = {
		field: FileFieldsEnum;
	};

	type FileGroupConnection_groupArgs = {
		field: FileFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type FileGroupConnection_maxArgs = {
		field: FileFieldsEnum;
	};

	type FileGroupConnection_minArgs = {
		field: FileFieldsEnum;
	};

	type FileGroupConnection_sumArgs = {
		field: FileFieldsEnum;
	};

	type FileSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<FileFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type FloatQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars["Float"]>;
		readonly gt: InputMaybe<Scalars["Float"]>;
		readonly gte: InputMaybe<Scalars["Float"]>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Float"]>>>;
		readonly lt: InputMaybe<Scalars["Float"]>;
		readonly lte: InputMaybe<Scalars["Float"]>;
		readonly ne: InputMaybe<Scalars["Float"]>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Float"]>>>;
	};

	type GatsbyImageDataQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars["GatsbyImageData"]>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["GatsbyImageData"]>>>;
		readonly ne: InputMaybe<Scalars["GatsbyImageData"]>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["GatsbyImageData"]>>>;
	};

	type GatsbyImageFormat = "auto" | "avif" | "jpg" | "NO_CHANGE" | "png" | "webp";

	type GatsbyImageLayout = "constrained" | "fixed" | "fullWidth";

	type GatsbyImagePlaceholder = "blurred" | "dominantColor" | "none" | "tracedSVG";

	type ImageResizingBehavior =
		/** Crop a part of the original image to match the specified size. */
		| "crop"
		/** Crop the image to the specified dimensions, if the original image is smaller than these dimensions, then the image will be upscaled. */
		| "fill"
		| "NO_CHANGE"
		/** Same as the default resizing, but adds padding so that the generated image has the specified dimensions. */
		| "pad"
		/** Scale the image regardless of the original aspect ratio. */
		| "scale"
		/** When used in association with the f parameter below, creates a thumbnail from the image based on a focus area. */
		| "thumb";

	type IntQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars["Int"]>;
		readonly gt: InputMaybe<Scalars["Int"]>;
		readonly gte: InputMaybe<Scalars["Int"]>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Int"]>>>;
		readonly lt: InputMaybe<Scalars["Int"]>;
		readonly lte: InputMaybe<Scalars["Int"]>;
		readonly ne: InputMaybe<Scalars["Int"]>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Int"]>>>;
	};

	type Internal = {
		readonly content: Maybe<Scalars["String"]>;
		readonly contentDigest: Scalars["String"];
		readonly description: Maybe<Scalars["String"]>;
		readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
		readonly ignoreType: Maybe<Scalars["Boolean"]>;
		readonly mediaType: Maybe<Scalars["String"]>;
		readonly owner: Scalars["String"];
		readonly type: Scalars["String"];
	};

	type InternalFilterInput = {
		readonly content: InputMaybe<StringQueryOperatorInput>;
		readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
		readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
		readonly mediaType: InputMaybe<StringQueryOperatorInput>;
		readonly owner: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type JSONQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars["JSON"]>;
		readonly glob: InputMaybe<Scalars["JSON"]>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["JSON"]>>>;
		readonly ne: InputMaybe<Scalars["JSON"]>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["JSON"]>>>;
		readonly regex: InputMaybe<Scalars["JSON"]>;
	};

	/** Node Interface */
	type Node = {
		readonly children: ReadonlyArray<Node>;
		readonly id: Scalars["ID"];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
	};

	type NodeFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
	};

	type NodeFilterListInput = {
		readonly elemMatch: InputMaybe<NodeFilterInput>;
	};

	type PageInfo = {
		readonly currentPage: Scalars["Int"];
		readonly hasNextPage: Scalars["Boolean"];
		readonly hasPreviousPage: Scalars["Boolean"];
		readonly itemCount: Scalars["Int"];
		readonly pageCount: Scalars["Int"];
		readonly perPage: Maybe<Scalars["Int"]>;
		readonly totalCount: Scalars["Int"];
	};

	type Query = {
		readonly allContentfulAsset: ContentfulAssetConnection;
		readonly allContentfulContentType: ContentfulContentTypeConnection;
		readonly allContentfulEntry: ContentfulEntryConnection;
		readonly allContentfulHomePage: ContentfulHomePageConnection;
		readonly allDirectory: DirectoryConnection;
		readonly allFile: FileConnection;
		readonly allSite: SiteConnection;
		readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
		readonly allSiteFunction: SiteFunctionConnection;
		readonly allSitePage: SitePageConnection;
		readonly allSitePlugin: SitePluginConnection;
		readonly contentfulAsset: Maybe<ContentfulAsset>;
		readonly contentfulContentType: Maybe<ContentfulContentType>;
		readonly contentfulEntry: Maybe<ContentfulEntry>;
		readonly contentfulHomePage: Maybe<ContentfulHomePage>;
		readonly directory: Maybe<Directory>;
		readonly file: Maybe<File>;
		readonly site: Maybe<Site>;
		readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
		readonly siteFunction: Maybe<SiteFunction>;
		readonly sitePage: Maybe<SitePage>;
		readonly sitePlugin: Maybe<SitePlugin>;
	};

	type Query_allContentfulAssetArgs = {
		filter: InputMaybe<ContentfulAssetFilterInput>;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
		sort: InputMaybe<ContentfulAssetSortInput>;
	};

	type Query_allContentfulContentTypeArgs = {
		filter: InputMaybe<ContentfulContentTypeFilterInput>;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
		sort: InputMaybe<ContentfulContentTypeSortInput>;
	};

	type Query_allContentfulEntryArgs = {
		filter: InputMaybe<ContentfulEntryFilterInput>;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
		sort: InputMaybe<ContentfulEntrySortInput>;
	};

	type Query_allContentfulHomePageArgs = {
		filter: InputMaybe<ContentfulHomePageFilterInput>;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
		sort: InputMaybe<ContentfulHomePageSortInput>;
	};

	type Query_allDirectoryArgs = {
		filter: InputMaybe<DirectoryFilterInput>;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
		sort: InputMaybe<DirectorySortInput>;
	};

	type Query_allFileArgs = {
		filter: InputMaybe<FileFilterInput>;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
		sort: InputMaybe<FileSortInput>;
	};

	type Query_allSiteArgs = {
		filter: InputMaybe<SiteFilterInput>;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
		sort: InputMaybe<SiteSortInput>;
	};

	type Query_allSiteBuildMetadataArgs = {
		filter: InputMaybe<SiteBuildMetadataFilterInput>;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
		sort: InputMaybe<SiteBuildMetadataSortInput>;
	};

	type Query_allSiteFunctionArgs = {
		filter: InputMaybe<SiteFunctionFilterInput>;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
		sort: InputMaybe<SiteFunctionSortInput>;
	};

	type Query_allSitePageArgs = {
		filter: InputMaybe<SitePageFilterInput>;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
		sort: InputMaybe<SitePageSortInput>;
	};

	type Query_allSitePluginArgs = {
		filter: InputMaybe<SitePluginFilterInput>;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
		sort: InputMaybe<SitePluginSortInput>;
	};

	type Query_contentfulAssetArgs = {
		children: InputMaybe<NodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		file: InputMaybe<ContentfulAssetFileFilterInput>;
		filename: InputMaybe<StringQueryOperatorInput>;
		filesize: InputMaybe<IntQueryOperatorInput>;
		gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
		gatsbyImageData: InputMaybe<JSONQueryOperatorInput>;
		height: InputMaybe<IntQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		mimeType: InputMaybe<StringQueryOperatorInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		placeholderUrl: InputMaybe<StringQueryOperatorInput>;
		publicUrl: InputMaybe<StringQueryOperatorInput>;
		resize: InputMaybe<RemoteFileResizeFilterInput>;
		size: InputMaybe<IntQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulAssetSysFilterInput>;
		title: InputMaybe<StringQueryOperatorInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
		url: InputMaybe<StringQueryOperatorInput>;
		width: InputMaybe<IntQueryOperatorInput>;
	};

	type Query_contentfulContentTypeArgs = {
		children: InputMaybe<NodeFilterListInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		sys: InputMaybe<ContentfulContentTypeSysFilterInput>;
	};

	type Query_contentfulEntryArgs = {
		children: InputMaybe<NodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
	};

	type Query_contentfulHomePageArgs = {
		backgroundVideos: InputMaybe<ContentfulAssetFilterListInput>;
		children: InputMaybe<NodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		hero: InputMaybe<ContentfulHomePageHeroFilterInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		preHero: InputMaybe<ContentfulHomePagePreHeroFilterInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulHomePageSysFilterInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_directoryArgs = {
		absolutePath: InputMaybe<StringQueryOperatorInput>;
		accessTime: InputMaybe<DateQueryOperatorInput>;
		atime: InputMaybe<DateQueryOperatorInput>;
		atimeMs: InputMaybe<FloatQueryOperatorInput>;
		base: InputMaybe<StringQueryOperatorInput>;
		birthTime: InputMaybe<DateQueryOperatorInput>;
		birthtime: InputMaybe<DateQueryOperatorInput>;
		birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
		changeTime: InputMaybe<DateQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		ctime: InputMaybe<DateQueryOperatorInput>;
		ctimeMs: InputMaybe<FloatQueryOperatorInput>;
		dev: InputMaybe<IntQueryOperatorInput>;
		dir: InputMaybe<StringQueryOperatorInput>;
		ext: InputMaybe<StringQueryOperatorInput>;
		extension: InputMaybe<StringQueryOperatorInput>;
		gid: InputMaybe<IntQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		ino: InputMaybe<FloatQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		mode: InputMaybe<IntQueryOperatorInput>;
		modifiedTime: InputMaybe<DateQueryOperatorInput>;
		mtime: InputMaybe<DateQueryOperatorInput>;
		mtimeMs: InputMaybe<FloatQueryOperatorInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nlink: InputMaybe<IntQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		prettySize: InputMaybe<StringQueryOperatorInput>;
		rdev: InputMaybe<IntQueryOperatorInput>;
		relativeDirectory: InputMaybe<StringQueryOperatorInput>;
		relativePath: InputMaybe<StringQueryOperatorInput>;
		root: InputMaybe<StringQueryOperatorInput>;
		size: InputMaybe<IntQueryOperatorInput>;
		sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
		uid: InputMaybe<IntQueryOperatorInput>;
	};

	type Query_fileArgs = {
		absolutePath: InputMaybe<StringQueryOperatorInput>;
		accessTime: InputMaybe<DateQueryOperatorInput>;
		atime: InputMaybe<DateQueryOperatorInput>;
		atimeMs: InputMaybe<FloatQueryOperatorInput>;
		base: InputMaybe<StringQueryOperatorInput>;
		birthTime: InputMaybe<DateQueryOperatorInput>;
		birthtime: InputMaybe<DateQueryOperatorInput>;
		birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
		changeTime: InputMaybe<DateQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		ctime: InputMaybe<DateQueryOperatorInput>;
		ctimeMs: InputMaybe<FloatQueryOperatorInput>;
		dev: InputMaybe<IntQueryOperatorInput>;
		dir: InputMaybe<StringQueryOperatorInput>;
		ext: InputMaybe<StringQueryOperatorInput>;
		extension: InputMaybe<StringQueryOperatorInput>;
		gid: InputMaybe<IntQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		ino: InputMaybe<FloatQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		mode: InputMaybe<IntQueryOperatorInput>;
		modifiedTime: InputMaybe<DateQueryOperatorInput>;
		mtime: InputMaybe<DateQueryOperatorInput>;
		mtimeMs: InputMaybe<FloatQueryOperatorInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nlink: InputMaybe<IntQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		prettySize: InputMaybe<StringQueryOperatorInput>;
		rdev: InputMaybe<IntQueryOperatorInput>;
		relativeDirectory: InputMaybe<StringQueryOperatorInput>;
		relativePath: InputMaybe<StringQueryOperatorInput>;
		root: InputMaybe<StringQueryOperatorInput>;
		size: InputMaybe<IntQueryOperatorInput>;
		sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
		uid: InputMaybe<IntQueryOperatorInput>;
	};

	type Query_siteArgs = {
		buildTime: InputMaybe<DateQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		graphqlTypegen: InputMaybe<BooleanQueryOperatorInput>;
		host: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		jsxRuntime: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		pathPrefix: InputMaybe<StringQueryOperatorInput>;
		polyfill: InputMaybe<BooleanQueryOperatorInput>;
		port: InputMaybe<IntQueryOperatorInput>;
		siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
		trailingSlash: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_siteBuildMetadataArgs = {
		buildTime: InputMaybe<DateQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
	};

	type Query_siteFunctionArgs = {
		absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		functionRoute: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		matchPath: InputMaybe<StringQueryOperatorInput>;
		originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
		originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		pluginName: InputMaybe<StringQueryOperatorInput>;
		relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_sitePageArgs = {
		children: InputMaybe<NodeFilterListInput>;
		component: InputMaybe<StringQueryOperatorInput>;
		componentChunkName: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		internalComponentName: InputMaybe<StringQueryOperatorInput>;
		matchPath: InputMaybe<StringQueryOperatorInput>;
		pageContext: InputMaybe<JSONQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		path: InputMaybe<StringQueryOperatorInput>;
		pluginCreator: InputMaybe<SitePluginFilterInput>;
	};

	type Query_sitePluginArgs = {
		browserAPIs: InputMaybe<StringQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nodeAPIs: InputMaybe<StringQueryOperatorInput>;
		packageJson: InputMaybe<JSONQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		pluginFilepath: InputMaybe<StringQueryOperatorInput>;
		pluginOptions: InputMaybe<JSONQueryOperatorInput>;
		resolve: InputMaybe<StringQueryOperatorInput>;
		ssrAPIs: InputMaybe<StringQueryOperatorInput>;
		version: InputMaybe<StringQueryOperatorInput>;
	};

	/** Remote Interface */
	type RemoteFile = {
		readonly filename: Scalars["String"];
		readonly filesize: Maybe<Scalars["Int"]>;
		/** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
		readonly gatsbyImage: Maybe<Scalars["GatsbyImageData"]>;
		readonly height: Maybe<Scalars["Int"]>;
		readonly id: Scalars["ID"];
		readonly mimeType: Scalars["String"];
		readonly publicUrl: Scalars["String"];
		readonly resize: Maybe<RemoteFileResize>;
		readonly width: Maybe<Scalars["Int"]>;
	};

	/** Remote Interface */
	type RemoteFile_gatsbyImageArgs = {
		aspectRatio: InputMaybe<Scalars["Float"]>;
		backgroundColor: InputMaybe<Scalars["String"]>;
		breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Int"]>>>;
		cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
		fit?: InputMaybe<RemoteFileFit>;
		formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
		height: InputMaybe<Scalars["Int"]>;
		layout?: InputMaybe<RemoteFileLayout>;
		outputPixelDensities?: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Float"]>>>;
		placeholder?: InputMaybe<RemoteFilePlaceholder>;
		quality?: InputMaybe<Scalars["Int"]>;
		sizes: InputMaybe<Scalars["String"]>;
		width: InputMaybe<Scalars["Int"]>;
	};

	/** Remote Interface */
	type RemoteFile_resizeArgs = {
		aspectRatio: InputMaybe<Scalars["Float"]>;
		cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
		fit?: InputMaybe<RemoteFileFit>;
		format?: InputMaybe<RemoteFileFormat>;
		height: InputMaybe<Scalars["Int"]>;
		quality?: InputMaybe<Scalars["Int"]>;
		width: InputMaybe<Scalars["Int"]>;
	};

	type RemoteFileCropFocus = "bottom" | "center" | "edges" | "entropy" | "faces" | "left" | "right" | "top";

	type RemoteFileFit = "contain" | "cover" | "fill" | "outside";

	type RemoteFileFormat = "auto" | "avif" | "jpg" | "png" | "webp";

	type RemoteFileLayout = "constrained" | "fixed" | "fullWidth";

	type RemoteFilePlaceholder = "blurred" | "dominantColor" | "none" | "tracedSVG";

	type RemoteFileResize = {
		readonly height: Maybe<Scalars["Int"]>;
		readonly src: Maybe<Scalars["String"]>;
		readonly width: Maybe<Scalars["Int"]>;
	};

	type RemoteFileResizeFilterInput = {
		readonly height: InputMaybe<IntQueryOperatorInput>;
		readonly src: InputMaybe<StringQueryOperatorInput>;
		readonly width: InputMaybe<IntQueryOperatorInput>;
	};

	type Site = Node & {
		readonly buildTime: Maybe<Scalars["Date"]>;
		readonly children: ReadonlyArray<Node>;
		readonly graphqlTypegen: Maybe<Scalars["Boolean"]>;
		readonly host: Maybe<Scalars["String"]>;
		readonly id: Scalars["ID"];
		readonly internal: Internal;
		readonly jsxRuntime: Maybe<Scalars["String"]>;
		readonly parent: Maybe<Node>;
		readonly pathPrefix: Maybe<Scalars["String"]>;
		readonly polyfill: Maybe<Scalars["Boolean"]>;
		readonly port: Maybe<Scalars["Int"]>;
		readonly siteMetadata: Maybe<SiteSiteMetadata>;
		readonly trailingSlash: Maybe<Scalars["String"]>;
	};

	type Site_buildTimeArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type SiteBuildMetadata = Node & {
		readonly buildTime: Maybe<Scalars["Date"]>;
		readonly children: ReadonlyArray<Node>;
		readonly id: Scalars["ID"];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
	};

	type SiteBuildMetadata_buildTimeArgs = {
		difference: InputMaybe<Scalars["String"]>;
		formatString: InputMaybe<Scalars["String"]>;
		fromNow: InputMaybe<Scalars["Boolean"]>;
		locale: InputMaybe<Scalars["String"]>;
	};

	type SiteBuildMetadataConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
		readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<SiteBuildMetadata>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type SiteBuildMetadataConnection_distinctArgs = {
		field: SiteBuildMetadataFieldsEnum;
	};

	type SiteBuildMetadataConnection_groupArgs = {
		field: SiteBuildMetadataFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type SiteBuildMetadataConnection_maxArgs = {
		field: SiteBuildMetadataFieldsEnum;
	};

	type SiteBuildMetadataConnection_minArgs = {
		field: SiteBuildMetadataFieldsEnum;
	};

	type SiteBuildMetadataConnection_sumArgs = {
		field: SiteBuildMetadataFieldsEnum;
	};

	type SiteBuildMetadataEdge = {
		readonly next: Maybe<SiteBuildMetadata>;
		readonly node: SiteBuildMetadata;
		readonly previous: Maybe<SiteBuildMetadata>;
	};

	type SiteBuildMetadataFieldsEnum =
		| "buildTime"
		| "children"
		| "children.children"
		| "children.children.children"
		| "children.children.children.children"
		| "children.children.children.id"
		| "children.children.id"
		| "children.children.internal.content"
		| "children.children.internal.contentDigest"
		| "children.children.internal.description"
		| "children.children.internal.fieldOwners"
		| "children.children.internal.ignoreType"
		| "children.children.internal.mediaType"
		| "children.children.internal.owner"
		| "children.children.internal.type"
		| "children.children.parent.children"
		| "children.children.parent.id"
		| "children.id"
		| "children.internal.content"
		| "children.internal.contentDigest"
		| "children.internal.description"
		| "children.internal.fieldOwners"
		| "children.internal.ignoreType"
		| "children.internal.mediaType"
		| "children.internal.owner"
		| "children.internal.type"
		| "children.parent.children"
		| "children.parent.children.children"
		| "children.parent.children.id"
		| "children.parent.id"
		| "children.parent.internal.content"
		| "children.parent.internal.contentDigest"
		| "children.parent.internal.description"
		| "children.parent.internal.fieldOwners"
		| "children.parent.internal.ignoreType"
		| "children.parent.internal.mediaType"
		| "children.parent.internal.owner"
		| "children.parent.internal.type"
		| "children.parent.parent.children"
		| "children.parent.parent.id"
		| "id"
		| "internal.content"
		| "internal.contentDigest"
		| "internal.description"
		| "internal.fieldOwners"
		| "internal.ignoreType"
		| "internal.mediaType"
		| "internal.owner"
		| "internal.type"
		| "parent.children"
		| "parent.children.children"
		| "parent.children.children.children"
		| "parent.children.children.id"
		| "parent.children.id"
		| "parent.children.internal.content"
		| "parent.children.internal.contentDigest"
		| "parent.children.internal.description"
		| "parent.children.internal.fieldOwners"
		| "parent.children.internal.ignoreType"
		| "parent.children.internal.mediaType"
		| "parent.children.internal.owner"
		| "parent.children.internal.type"
		| "parent.children.parent.children"
		| "parent.children.parent.id"
		| "parent.id"
		| "parent.internal.content"
		| "parent.internal.contentDigest"
		| "parent.internal.description"
		| "parent.internal.fieldOwners"
		| "parent.internal.ignoreType"
		| "parent.internal.mediaType"
		| "parent.internal.owner"
		| "parent.internal.type"
		| "parent.parent.children"
		| "parent.parent.children.children"
		| "parent.parent.children.id"
		| "parent.parent.id"
		| "parent.parent.internal.content"
		| "parent.parent.internal.contentDigest"
		| "parent.parent.internal.description"
		| "parent.parent.internal.fieldOwners"
		| "parent.parent.internal.ignoreType"
		| "parent.parent.internal.mediaType"
		| "parent.parent.internal.owner"
		| "parent.parent.internal.type"
		| "parent.parent.parent.children"
		| "parent.parent.parent.id";

	type SiteBuildMetadataFilterInput = {
		readonly buildTime: InputMaybe<DateQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
	};

	type SiteBuildMetadataGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
		readonly field: Scalars["String"];
		readonly fieldValue: Maybe<Scalars["String"]>;
		readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<SiteBuildMetadata>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type SiteBuildMetadataGroupConnection_distinctArgs = {
		field: SiteBuildMetadataFieldsEnum;
	};

	type SiteBuildMetadataGroupConnection_groupArgs = {
		field: SiteBuildMetadataFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type SiteBuildMetadataGroupConnection_maxArgs = {
		field: SiteBuildMetadataFieldsEnum;
	};

	type SiteBuildMetadataGroupConnection_minArgs = {
		field: SiteBuildMetadataFieldsEnum;
	};

	type SiteBuildMetadataGroupConnection_sumArgs = {
		field: SiteBuildMetadataFieldsEnum;
	};

	type SiteBuildMetadataSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type SiteConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<SiteEdge>;
		readonly group: ReadonlyArray<SiteGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<Site>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type SiteConnection_distinctArgs = {
		field: SiteFieldsEnum;
	};

	type SiteConnection_groupArgs = {
		field: SiteFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type SiteConnection_maxArgs = {
		field: SiteFieldsEnum;
	};

	type SiteConnection_minArgs = {
		field: SiteFieldsEnum;
	};

	type SiteConnection_sumArgs = {
		field: SiteFieldsEnum;
	};

	type SiteEdge = {
		readonly next: Maybe<Site>;
		readonly node: Site;
		readonly previous: Maybe<Site>;
	};

	type SiteFieldsEnum =
		| "buildTime"
		| "children"
		| "children.children"
		| "children.children.children"
		| "children.children.children.children"
		| "children.children.children.id"
		| "children.children.id"
		| "children.children.internal.content"
		| "children.children.internal.contentDigest"
		| "children.children.internal.description"
		| "children.children.internal.fieldOwners"
		| "children.children.internal.ignoreType"
		| "children.children.internal.mediaType"
		| "children.children.internal.owner"
		| "children.children.internal.type"
		| "children.children.parent.children"
		| "children.children.parent.id"
		| "children.id"
		| "children.internal.content"
		| "children.internal.contentDigest"
		| "children.internal.description"
		| "children.internal.fieldOwners"
		| "children.internal.ignoreType"
		| "children.internal.mediaType"
		| "children.internal.owner"
		| "children.internal.type"
		| "children.parent.children"
		| "children.parent.children.children"
		| "children.parent.children.id"
		| "children.parent.id"
		| "children.parent.internal.content"
		| "children.parent.internal.contentDigest"
		| "children.parent.internal.description"
		| "children.parent.internal.fieldOwners"
		| "children.parent.internal.ignoreType"
		| "children.parent.internal.mediaType"
		| "children.parent.internal.owner"
		| "children.parent.internal.type"
		| "children.parent.parent.children"
		| "children.parent.parent.id"
		| "graphqlTypegen"
		| "host"
		| "id"
		| "internal.content"
		| "internal.contentDigest"
		| "internal.description"
		| "internal.fieldOwners"
		| "internal.ignoreType"
		| "internal.mediaType"
		| "internal.owner"
		| "internal.type"
		| "jsxRuntime"
		| "parent.children"
		| "parent.children.children"
		| "parent.children.children.children"
		| "parent.children.children.id"
		| "parent.children.id"
		| "parent.children.internal.content"
		| "parent.children.internal.contentDigest"
		| "parent.children.internal.description"
		| "parent.children.internal.fieldOwners"
		| "parent.children.internal.ignoreType"
		| "parent.children.internal.mediaType"
		| "parent.children.internal.owner"
		| "parent.children.internal.type"
		| "parent.children.parent.children"
		| "parent.children.parent.id"
		| "parent.id"
		| "parent.internal.content"
		| "parent.internal.contentDigest"
		| "parent.internal.description"
		| "parent.internal.fieldOwners"
		| "parent.internal.ignoreType"
		| "parent.internal.mediaType"
		| "parent.internal.owner"
		| "parent.internal.type"
		| "parent.parent.children"
		| "parent.parent.children.children"
		| "parent.parent.children.id"
		| "parent.parent.id"
		| "parent.parent.internal.content"
		| "parent.parent.internal.contentDigest"
		| "parent.parent.internal.description"
		| "parent.parent.internal.fieldOwners"
		| "parent.parent.internal.ignoreType"
		| "parent.parent.internal.mediaType"
		| "parent.parent.internal.owner"
		| "parent.parent.internal.type"
		| "parent.parent.parent.children"
		| "parent.parent.parent.id"
		| "pathPrefix"
		| "polyfill"
		| "port"
		| "siteMetadata.description"
		| "siteMetadata.title"
		| "trailingSlash";

	type SiteFilterInput = {
		readonly buildTime: InputMaybe<DateQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly graphqlTypegen: InputMaybe<BooleanQueryOperatorInput>;
		readonly host: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
		readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
		readonly port: InputMaybe<IntQueryOperatorInput>;
		readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
		readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
	};

	type SiteFunction = Node & {
		readonly absoluteCompiledFilePath: Scalars["String"];
		readonly children: ReadonlyArray<Node>;
		readonly functionRoute: Scalars["String"];
		readonly id: Scalars["ID"];
		readonly internal: Internal;
		readonly matchPath: Maybe<Scalars["String"]>;
		readonly originalAbsoluteFilePath: Scalars["String"];
		readonly originalRelativeFilePath: Scalars["String"];
		readonly parent: Maybe<Node>;
		readonly pluginName: Scalars["String"];
		readonly relativeCompiledFilePath: Scalars["String"];
	};

	type SiteFunctionConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<SiteFunctionEdge>;
		readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<SiteFunction>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type SiteFunctionConnection_distinctArgs = {
		field: SiteFunctionFieldsEnum;
	};

	type SiteFunctionConnection_groupArgs = {
		field: SiteFunctionFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type SiteFunctionConnection_maxArgs = {
		field: SiteFunctionFieldsEnum;
	};

	type SiteFunctionConnection_minArgs = {
		field: SiteFunctionFieldsEnum;
	};

	type SiteFunctionConnection_sumArgs = {
		field: SiteFunctionFieldsEnum;
	};

	type SiteFunctionEdge = {
		readonly next: Maybe<SiteFunction>;
		readonly node: SiteFunction;
		readonly previous: Maybe<SiteFunction>;
	};

	type SiteFunctionFieldsEnum =
		| "absoluteCompiledFilePath"
		| "children"
		| "children.children"
		| "children.children.children"
		| "children.children.children.children"
		| "children.children.children.id"
		| "children.children.id"
		| "children.children.internal.content"
		| "children.children.internal.contentDigest"
		| "children.children.internal.description"
		| "children.children.internal.fieldOwners"
		| "children.children.internal.ignoreType"
		| "children.children.internal.mediaType"
		| "children.children.internal.owner"
		| "children.children.internal.type"
		| "children.children.parent.children"
		| "children.children.parent.id"
		| "children.id"
		| "children.internal.content"
		| "children.internal.contentDigest"
		| "children.internal.description"
		| "children.internal.fieldOwners"
		| "children.internal.ignoreType"
		| "children.internal.mediaType"
		| "children.internal.owner"
		| "children.internal.type"
		| "children.parent.children"
		| "children.parent.children.children"
		| "children.parent.children.id"
		| "children.parent.id"
		| "children.parent.internal.content"
		| "children.parent.internal.contentDigest"
		| "children.parent.internal.description"
		| "children.parent.internal.fieldOwners"
		| "children.parent.internal.ignoreType"
		| "children.parent.internal.mediaType"
		| "children.parent.internal.owner"
		| "children.parent.internal.type"
		| "children.parent.parent.children"
		| "children.parent.parent.id"
		| "functionRoute"
		| "id"
		| "internal.content"
		| "internal.contentDigest"
		| "internal.description"
		| "internal.fieldOwners"
		| "internal.ignoreType"
		| "internal.mediaType"
		| "internal.owner"
		| "internal.type"
		| "matchPath"
		| "originalAbsoluteFilePath"
		| "originalRelativeFilePath"
		| "parent.children"
		| "parent.children.children"
		| "parent.children.children.children"
		| "parent.children.children.id"
		| "parent.children.id"
		| "parent.children.internal.content"
		| "parent.children.internal.contentDigest"
		| "parent.children.internal.description"
		| "parent.children.internal.fieldOwners"
		| "parent.children.internal.ignoreType"
		| "parent.children.internal.mediaType"
		| "parent.children.internal.owner"
		| "parent.children.internal.type"
		| "parent.children.parent.children"
		| "parent.children.parent.id"
		| "parent.id"
		| "parent.internal.content"
		| "parent.internal.contentDigest"
		| "parent.internal.description"
		| "parent.internal.fieldOwners"
		| "parent.internal.ignoreType"
		| "parent.internal.mediaType"
		| "parent.internal.owner"
		| "parent.internal.type"
		| "parent.parent.children"
		| "parent.parent.children.children"
		| "parent.parent.children.id"
		| "parent.parent.id"
		| "parent.parent.internal.content"
		| "parent.parent.internal.contentDigest"
		| "parent.parent.internal.description"
		| "parent.parent.internal.fieldOwners"
		| "parent.parent.internal.ignoreType"
		| "parent.parent.internal.mediaType"
		| "parent.parent.internal.owner"
		| "parent.parent.internal.type"
		| "parent.parent.parent.children"
		| "parent.parent.parent.id"
		| "pluginName"
		| "relativeCompiledFilePath";

	type SiteFunctionFilterInput = {
		readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly matchPath: InputMaybe<StringQueryOperatorInput>;
		readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
		readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly pluginName: InputMaybe<StringQueryOperatorInput>;
		readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
	};

	type SiteFunctionGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<SiteFunctionEdge>;
		readonly field: Scalars["String"];
		readonly fieldValue: Maybe<Scalars["String"]>;
		readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<SiteFunction>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type SiteFunctionGroupConnection_distinctArgs = {
		field: SiteFunctionFieldsEnum;
	};

	type SiteFunctionGroupConnection_groupArgs = {
		field: SiteFunctionFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type SiteFunctionGroupConnection_maxArgs = {
		field: SiteFunctionFieldsEnum;
	};

	type SiteFunctionGroupConnection_minArgs = {
		field: SiteFunctionFieldsEnum;
	};

	type SiteFunctionGroupConnection_sumArgs = {
		field: SiteFunctionFieldsEnum;
	};

	type SiteFunctionSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type SiteGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<SiteEdge>;
		readonly field: Scalars["String"];
		readonly fieldValue: Maybe<Scalars["String"]>;
		readonly group: ReadonlyArray<SiteGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<Site>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type SiteGroupConnection_distinctArgs = {
		field: SiteFieldsEnum;
	};

	type SiteGroupConnection_groupArgs = {
		field: SiteFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type SiteGroupConnection_maxArgs = {
		field: SiteFieldsEnum;
	};

	type SiteGroupConnection_minArgs = {
		field: SiteFieldsEnum;
	};

	type SiteGroupConnection_sumArgs = {
		field: SiteFieldsEnum;
	};

	type SitePage = Node & {
		readonly children: ReadonlyArray<Node>;
		readonly component: Scalars["String"];
		readonly componentChunkName: Scalars["String"];
		readonly id: Scalars["ID"];
		readonly internal: Internal;
		readonly internalComponentName: Scalars["String"];
		readonly matchPath: Maybe<Scalars["String"]>;
		readonly pageContext: Maybe<Scalars["JSON"]>;
		readonly parent: Maybe<Node>;
		readonly path: Scalars["String"];
		readonly pluginCreator: Maybe<SitePlugin>;
	};

	type SitePageConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<SitePageEdge>;
		readonly group: ReadonlyArray<SitePageGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<SitePage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type SitePageConnection_distinctArgs = {
		field: SitePageFieldsEnum;
	};

	type SitePageConnection_groupArgs = {
		field: SitePageFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type SitePageConnection_maxArgs = {
		field: SitePageFieldsEnum;
	};

	type SitePageConnection_minArgs = {
		field: SitePageFieldsEnum;
	};

	type SitePageConnection_sumArgs = {
		field: SitePageFieldsEnum;
	};

	type SitePageEdge = {
		readonly next: Maybe<SitePage>;
		readonly node: SitePage;
		readonly previous: Maybe<SitePage>;
	};

	type SitePageFieldsEnum =
		| "children"
		| "children.children"
		| "children.children.children"
		| "children.children.children.children"
		| "children.children.children.id"
		| "children.children.id"
		| "children.children.internal.content"
		| "children.children.internal.contentDigest"
		| "children.children.internal.description"
		| "children.children.internal.fieldOwners"
		| "children.children.internal.ignoreType"
		| "children.children.internal.mediaType"
		| "children.children.internal.owner"
		| "children.children.internal.type"
		| "children.children.parent.children"
		| "children.children.parent.id"
		| "children.id"
		| "children.internal.content"
		| "children.internal.contentDigest"
		| "children.internal.description"
		| "children.internal.fieldOwners"
		| "children.internal.ignoreType"
		| "children.internal.mediaType"
		| "children.internal.owner"
		| "children.internal.type"
		| "children.parent.children"
		| "children.parent.children.children"
		| "children.parent.children.id"
		| "children.parent.id"
		| "children.parent.internal.content"
		| "children.parent.internal.contentDigest"
		| "children.parent.internal.description"
		| "children.parent.internal.fieldOwners"
		| "children.parent.internal.ignoreType"
		| "children.parent.internal.mediaType"
		| "children.parent.internal.owner"
		| "children.parent.internal.type"
		| "children.parent.parent.children"
		| "children.parent.parent.id"
		| "component"
		| "componentChunkName"
		| "id"
		| "internalComponentName"
		| "internal.content"
		| "internal.contentDigest"
		| "internal.description"
		| "internal.fieldOwners"
		| "internal.ignoreType"
		| "internal.mediaType"
		| "internal.owner"
		| "internal.type"
		| "matchPath"
		| "pageContext"
		| "parent.children"
		| "parent.children.children"
		| "parent.children.children.children"
		| "parent.children.children.id"
		| "parent.children.id"
		| "parent.children.internal.content"
		| "parent.children.internal.contentDigest"
		| "parent.children.internal.description"
		| "parent.children.internal.fieldOwners"
		| "parent.children.internal.ignoreType"
		| "parent.children.internal.mediaType"
		| "parent.children.internal.owner"
		| "parent.children.internal.type"
		| "parent.children.parent.children"
		| "parent.children.parent.id"
		| "parent.id"
		| "parent.internal.content"
		| "parent.internal.contentDigest"
		| "parent.internal.description"
		| "parent.internal.fieldOwners"
		| "parent.internal.ignoreType"
		| "parent.internal.mediaType"
		| "parent.internal.owner"
		| "parent.internal.type"
		| "parent.parent.children"
		| "parent.parent.children.children"
		| "parent.parent.children.id"
		| "parent.parent.id"
		| "parent.parent.internal.content"
		| "parent.parent.internal.contentDigest"
		| "parent.parent.internal.description"
		| "parent.parent.internal.fieldOwners"
		| "parent.parent.internal.ignoreType"
		| "parent.parent.internal.mediaType"
		| "parent.parent.internal.owner"
		| "parent.parent.internal.type"
		| "parent.parent.parent.children"
		| "parent.parent.parent.id"
		| "path"
		| "pluginCreator.browserAPIs"
		| "pluginCreator.children"
		| "pluginCreator.children.children"
		| "pluginCreator.children.children.children"
		| "pluginCreator.children.children.id"
		| "pluginCreator.children.id"
		| "pluginCreator.children.internal.content"
		| "pluginCreator.children.internal.contentDigest"
		| "pluginCreator.children.internal.description"
		| "pluginCreator.children.internal.fieldOwners"
		| "pluginCreator.children.internal.ignoreType"
		| "pluginCreator.children.internal.mediaType"
		| "pluginCreator.children.internal.owner"
		| "pluginCreator.children.internal.type"
		| "pluginCreator.children.parent.children"
		| "pluginCreator.children.parent.id"
		| "pluginCreator.id"
		| "pluginCreator.internal.content"
		| "pluginCreator.internal.contentDigest"
		| "pluginCreator.internal.description"
		| "pluginCreator.internal.fieldOwners"
		| "pluginCreator.internal.ignoreType"
		| "pluginCreator.internal.mediaType"
		| "pluginCreator.internal.owner"
		| "pluginCreator.internal.type"
		| "pluginCreator.name"
		| "pluginCreator.nodeAPIs"
		| "pluginCreator.packageJson"
		| "pluginCreator.parent.children"
		| "pluginCreator.parent.children.children"
		| "pluginCreator.parent.children.id"
		| "pluginCreator.parent.id"
		| "pluginCreator.parent.internal.content"
		| "pluginCreator.parent.internal.contentDigest"
		| "pluginCreator.parent.internal.description"
		| "pluginCreator.parent.internal.fieldOwners"
		| "pluginCreator.parent.internal.ignoreType"
		| "pluginCreator.parent.internal.mediaType"
		| "pluginCreator.parent.internal.owner"
		| "pluginCreator.parent.internal.type"
		| "pluginCreator.parent.parent.children"
		| "pluginCreator.parent.parent.id"
		| "pluginCreator.pluginFilepath"
		| "pluginCreator.pluginOptions"
		| "pluginCreator.resolve"
		| "pluginCreator.ssrAPIs"
		| "pluginCreator.version";

	type SitePageFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly component: InputMaybe<StringQueryOperatorInput>;
		readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
		readonly matchPath: InputMaybe<StringQueryOperatorInput>;
		readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly path: InputMaybe<StringQueryOperatorInput>;
		readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
	};

	type SitePageGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<SitePageEdge>;
		readonly field: Scalars["String"];
		readonly fieldValue: Maybe<Scalars["String"]>;
		readonly group: ReadonlyArray<SitePageGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<SitePage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type SitePageGroupConnection_distinctArgs = {
		field: SitePageFieldsEnum;
	};

	type SitePageGroupConnection_groupArgs = {
		field: SitePageFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type SitePageGroupConnection_maxArgs = {
		field: SitePageFieldsEnum;
	};

	type SitePageGroupConnection_minArgs = {
		field: SitePageFieldsEnum;
	};

	type SitePageGroupConnection_sumArgs = {
		field: SitePageFieldsEnum;
	};

	type SitePageSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePageFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type SitePlugin = Node & {
		readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
		readonly children: ReadonlyArray<Node>;
		readonly id: Scalars["ID"];
		readonly internal: Internal;
		readonly name: Maybe<Scalars["String"]>;
		readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
		readonly packageJson: Maybe<Scalars["JSON"]>;
		readonly parent: Maybe<Node>;
		readonly pluginFilepath: Maybe<Scalars["String"]>;
		readonly pluginOptions: Maybe<Scalars["JSON"]>;
		readonly resolve: Maybe<Scalars["String"]>;
		readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
		readonly version: Maybe<Scalars["String"]>;
	};

	type SitePluginConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<SitePluginEdge>;
		readonly group: ReadonlyArray<SitePluginGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<SitePlugin>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type SitePluginConnection_distinctArgs = {
		field: SitePluginFieldsEnum;
	};

	type SitePluginConnection_groupArgs = {
		field: SitePluginFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type SitePluginConnection_maxArgs = {
		field: SitePluginFieldsEnum;
	};

	type SitePluginConnection_minArgs = {
		field: SitePluginFieldsEnum;
	};

	type SitePluginConnection_sumArgs = {
		field: SitePluginFieldsEnum;
	};

	type SitePluginEdge = {
		readonly next: Maybe<SitePlugin>;
		readonly node: SitePlugin;
		readonly previous: Maybe<SitePlugin>;
	};

	type SitePluginFieldsEnum =
		| "browserAPIs"
		| "children"
		| "children.children"
		| "children.children.children"
		| "children.children.children.children"
		| "children.children.children.id"
		| "children.children.id"
		| "children.children.internal.content"
		| "children.children.internal.contentDigest"
		| "children.children.internal.description"
		| "children.children.internal.fieldOwners"
		| "children.children.internal.ignoreType"
		| "children.children.internal.mediaType"
		| "children.children.internal.owner"
		| "children.children.internal.type"
		| "children.children.parent.children"
		| "children.children.parent.id"
		| "children.id"
		| "children.internal.content"
		| "children.internal.contentDigest"
		| "children.internal.description"
		| "children.internal.fieldOwners"
		| "children.internal.ignoreType"
		| "children.internal.mediaType"
		| "children.internal.owner"
		| "children.internal.type"
		| "children.parent.children"
		| "children.parent.children.children"
		| "children.parent.children.id"
		| "children.parent.id"
		| "children.parent.internal.content"
		| "children.parent.internal.contentDigest"
		| "children.parent.internal.description"
		| "children.parent.internal.fieldOwners"
		| "children.parent.internal.ignoreType"
		| "children.parent.internal.mediaType"
		| "children.parent.internal.owner"
		| "children.parent.internal.type"
		| "children.parent.parent.children"
		| "children.parent.parent.id"
		| "id"
		| "internal.content"
		| "internal.contentDigest"
		| "internal.description"
		| "internal.fieldOwners"
		| "internal.ignoreType"
		| "internal.mediaType"
		| "internal.owner"
		| "internal.type"
		| "name"
		| "nodeAPIs"
		| "packageJson"
		| "parent.children"
		| "parent.children.children"
		| "parent.children.children.children"
		| "parent.children.children.id"
		| "parent.children.id"
		| "parent.children.internal.content"
		| "parent.children.internal.contentDigest"
		| "parent.children.internal.description"
		| "parent.children.internal.fieldOwners"
		| "parent.children.internal.ignoreType"
		| "parent.children.internal.mediaType"
		| "parent.children.internal.owner"
		| "parent.children.internal.type"
		| "parent.children.parent.children"
		| "parent.children.parent.id"
		| "parent.id"
		| "parent.internal.content"
		| "parent.internal.contentDigest"
		| "parent.internal.description"
		| "parent.internal.fieldOwners"
		| "parent.internal.ignoreType"
		| "parent.internal.mediaType"
		| "parent.internal.owner"
		| "parent.internal.type"
		| "parent.parent.children"
		| "parent.parent.children.children"
		| "parent.parent.children.id"
		| "parent.parent.id"
		| "parent.parent.internal.content"
		| "parent.parent.internal.contentDigest"
		| "parent.parent.internal.description"
		| "parent.parent.internal.fieldOwners"
		| "parent.parent.internal.ignoreType"
		| "parent.parent.internal.mediaType"
		| "parent.parent.internal.owner"
		| "parent.parent.internal.type"
		| "parent.parent.parent.children"
		| "parent.parent.parent.id"
		| "pluginFilepath"
		| "pluginOptions"
		| "resolve"
		| "ssrAPIs"
		| "version";

	type SitePluginFilterInput = {
		readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
		readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
		readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
		readonly resolve: InputMaybe<StringQueryOperatorInput>;
		readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
		readonly version: InputMaybe<StringQueryOperatorInput>;
	};

	type SitePluginGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars["String"]>;
		readonly edges: ReadonlyArray<SitePluginEdge>;
		readonly field: Scalars["String"];
		readonly fieldValue: Maybe<Scalars["String"]>;
		readonly group: ReadonlyArray<SitePluginGroupConnection>;
		readonly max: Maybe<Scalars["Float"]>;
		readonly min: Maybe<Scalars["Float"]>;
		readonly nodes: ReadonlyArray<SitePlugin>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars["Float"]>;
		readonly totalCount: Scalars["Int"];
	};

	type SitePluginGroupConnection_distinctArgs = {
		field: SitePluginFieldsEnum;
	};

	type SitePluginGroupConnection_groupArgs = {
		field: SitePluginFieldsEnum;
		limit: InputMaybe<Scalars["Int"]>;
		skip: InputMaybe<Scalars["Int"]>;
	};

	type SitePluginGroupConnection_maxArgs = {
		field: SitePluginFieldsEnum;
	};

	type SitePluginGroupConnection_minArgs = {
		field: SitePluginFieldsEnum;
	};

	type SitePluginGroupConnection_sumArgs = {
		field: SitePluginFieldsEnum;
	};

	type SitePluginSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePluginFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type SiteSiteMetadata = {
		readonly description: Maybe<Scalars["String"]>;
		readonly title: Maybe<Scalars["String"]>;
	};

	type SiteSiteMetadataFilterInput = {
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
	};

	type SiteSortInput = {
		readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFieldsEnum>>>;
		readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
	};

	type SortOrderEnum = "ASC" | "DESC";

	type StringQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars["String"]>;
		readonly glob: InputMaybe<Scalars["String"]>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["String"]>>>;
		readonly ne: InputMaybe<Scalars["String"]>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["String"]>>>;
		readonly regex: InputMaybe<Scalars["String"]>;
	};

	type HomeDataQueryVariables = Exact<{ [key: string]: never }>;

	type HomeDataQuery = {
		readonly contentfulHomePage: {
			readonly preHero: { readonly raw: string | null } | null;
			readonly hero: { readonly raw: string | null } | null;
			readonly backgroundVideos: ReadonlyArray<{
				readonly publicUrl: string;
			} | null> | null;
		} | null;
	};
}
